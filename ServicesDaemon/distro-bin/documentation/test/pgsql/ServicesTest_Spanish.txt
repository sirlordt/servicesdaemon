Para cambiar la clave por defecto del usuario postgres (El equivalente al usuario root de mysql y sysdba de firebird) debe realizar los siguiente pasos (comandos desde la consola):

$ sudo -u postgres psql 

Luego le debe aparecer un pront como este postgres=#, desde hay debe teclear lo siguiente

alter user postgres password 'rafael';

Debe verse algo como lo siguiente: 

postgres=# alter user postgres password 'rafael';

Luego debe aparecer algo como, la anterior línea cambia el la contraseña del usuario postgres a rafael:

ALTER ROLE

Para salir de ese pront debe escribir lo siguiente:

\q

Todo el proceso se debe ver como lo siguiente:


sirlordt@linux-desktop $ sudo -u postgres psql
[sudo] password for sirlordt: 
psql (9.1.9)
Type "help" for help.

postgres=# alter user postgres password 'rafael';
ALTER ROLE
postgres=# \q
sirlordt@linux-desktop $

Nota 1: Consideraciones de seguridad como esta es una base de datos de prueba y no es nada de producción por ees motivo se usa el usuario postgres, en la vida real usted nunca debería usarlo para conectarse a una base de datos en producción, para eso debe crear un uusuario aparte y darle los privilegios adecuados sobre su base de datos.

Nota 2: Para entrar a la linea de comando del psql usa lo siguiente: psql -U postgres -d postgres -h localhost

Nota 3: En el DBServicesManager.conf se asume que la clave del postgres es rafael, si usaste otra clave cambiala en ese archivo por la correcta.

Te preguntara la contraseña que estableciste en los anteriores pasos, para nuestro ejemplo yo coloque rafael, tu deberas colocar la tuya o si usaste la misma que yo.

Luego debería parecerte un pront como este postgres=#

Para crear la base de datos inicial en pgsql desde linux usa el siguiente comando:

Linux/Windows:
psql -U postgres -h localhost -f PGSQLTestDB.sql

Nota 1: El archivo PGSQLTestDB.sql lo encontrarás en la carpeta documentation, dentro de la carpeta distro-bin

Recomiendo ampliamente el Postman un plugin para Google Chrome, para realizar las siguientes pruebas el único detalle es un poco engorroso enviar los parámetros uno por uno, sin embargo es capaz de guardar las llamadas con sus parámetros, puedes importar la lista de llamadas a los servicios importando los archivos "DBServices Test PgSQL.json" y "Generic Calls.json" del directorio postman_google_chrome y las variables de entorno del archivo "Variable Test 192.168.2.133-environment.json", este último se importa desde la parte superior derecha, donde dice "No environment", estos archivos ayudan mucho para no tener que crear desde cero el entorno de pruebas adecuado.

Yo realice estas pruebas desde un Linux Mint 14.0

Pruebas a realizar:

Usando PgSQL 9.1 un ReponseFormat=XML-DATAPACKET y un ReponseFormatVersion=1.1, recuerda que puedes cambiar la configuración en el DBServicesManager.conf en los valores Default_Response_Format y Default_Response_Format_Version para que el formato de respuesta por defecto sea otro, CSV, JSON, etc.

Prueba 1 Caso 1 (Enumerar Servicios), para ver la salida del servicio vea el archivo test01_service_output_case1.xml

ServiceName=System.Enum.Services
ResponseFormat=XML-DATAPACKET
ResponseFormatVersion=1.1

Prueba 2 Caso 1 (Iniciar Sesión en DB6 => PgSQL), para ver la salida del servicio vea el archivo test02_service_output_case1.xml

ServiceName=System.Start.Session
ResponseFormat=XML-DATAPACKET
ResponseFormatVersion=1.1
DBConnection=DB6
username=test1
password=123qwerty

Nota 1: Para poder continuar las pruebas toma nota del campo SecurityTokenID, ese número cambia constantemente en cada inicio de sesión, para este caso es 1885853838911741669, para tú caso debería ser otro número distinto.  

Prueba 3 Caso 1 (Iniciar Transacción en DB6 => PgSQL), para ver la salida del servicio vea el archivo test03_service_output_case1.xml

ServiceName=System.Start.Transaction
ResponseFormat=XML-DATAPACKET
ResponseFormatVersion=1.1
SecurityTokenID=1885853838911741669

Nota 1: Observa que unos de los parámetros es el número que obtienes en el servicio anterior sin ese número no puede iniciar transacción ni usar las otros servicios, para este caso es 1568342447065610717, para tú caso debería ser otro número distinto.

Prueba 4 Caso 1 (Ejecutar una consulta parametrizado sobre DB6), para ver la salida del servicio vea el archivo test04_service_output_case1.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Select * From tblUsersDB Where IdUser=[paramvalue]IdUser[/paramvalue]
IdUser=[array datatype="integer"] [value]1[/value] [value]2[/value] [/array]

Prueba 4 Caso 2 (Ejecutar una consulta parametrizado sobre DB6), para ver la salida del servicio vea el archivo test04_service_output_case2.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Select * From tblUsersDB Where IdUser=[paramvalue]IdUser[/paramvalue]
IdUser=[array datatype="integer"] [value]1[/value] [value]A[/value] [/array]

Observe que el paramétro IdUser tiene un segundo valor inválido "A", que debería ser un número, para este caso sólo se tomará en consideración el primer valor "1" y no el segundo "A", por lo que el solose retorna el resultado de la consulta para el IdUser=1

Prueba 5 Caso 1 (Ejecutar una consulta plana, sin parámetros, sobre DB6), para ver la salida del servicio vea el archivo test05_service_output_case1.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Select * From tblUsersDB Where IdUser=1

Prueba 5 Caso 2 (Ejecutar una consulta plana, sin parámetros, sobre DB6), para ver la salida del servicio vea el archivo test05_service_output_case2.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Select * From tblUsersDB Where IdUser=1 Or IdUser=2

Prueba 6 Caso 1 (Ejecutar una consulta plana, sin parámetros, sobre DB1), para ver la salida del servicio vea el archivo test06_service_output_case1.xml

ServiceName=System.Execute.SQL
SecurityTokenID=8082223615663676309
TransactionID=9190353927525735764
SQL=Select nextval('GEN_TBLGROUPS_ID') New_ID

Pruebas de Inserción (Insert)

Prueba 7 Caso 1 (Ejecutar una inserción plana, sin parámetros, sobre DB1), para ver la salida del servicio vea el archivo test07_service_output_case1.xml, vamos a usar el NEW_ID generado en la prueba 6 anterior

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Insert Into tblGroups(Description) Values(2,'test group2')

Nota 1: La inserción no se materializa en la tabla hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Prueba 7 Caso 2 (Ejecutar una inserción plana, sin parámetros, sobre DB6), para ver la salida del servicio vea el archivo test07_service_output_case2.xml, vamos a dejar que el trigger asignado a la tabla tblGroups realize su trabajo enviando un null.

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Insert Into tblGroups(IdGroup,Description) Values(null,'test group3')

Nota 1: La inserción no se materializa en la tabla hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Prueba 7 Caso 3 (Ejecutar una inserción parametrizada, sobre DB6), para ver la salida del servicio vea el archivo test07_service_output_case3.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Insert Into tblGroups(IdGroup,Description) Values([paramvalue]IdUser[/paramvalue],[paramvalue]Description[/paramvalue])
IdUser=[array datatype="integer"] [value]4[/value] [value]5[/value] [/array]
Description=[array datatype="varchar"] [value]test group4[/value] [value]test group5[/value] [/array]

Nota1: La inserción no se materializa en la tabla hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Prueba 7 Caso 4 (Ejecutar una inserción parametrizada, sobre DB6), para ver la salida del servicio vea el archivo test07_service_output_case4.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Insert Into tblBlobData(Id,blobdata) Values([paramvalue]Id[/paramvalue],[paramvalue]BlobData[/paramvalue])
Id=[array datatype="integer"] [value]1[/value] [/array]
BlobData=[array datatype="blob"] [value][/value] [/array]

Nota 1: La inserción no se materializa en la tabla hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Nota 2: El mysql desde la línea de comandos le mostratará la info del campo blob, usando el comando Select * From tblBlobData Where Id=1; como una cantidad grande caracteres extraños, tendrá que consultar usando el ServicesDaemon para verificar la data insertada de la siguiente manera o usando in manager como EMS for Mysql y verificar si la imágen es correcta en el visor de blob

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Select * From tblBlobData Where Id=1

Para verificar que le base64 devuelto es la imágen válida usa la otra utilidad llamada Base64Decode, copias y pegas el la cadena del base64 y luego haces click en el boton que dice "Decode", deberías ver la una imagen con fondo negro con letras que dicen navy seal (Si usaste el el mismo base64 de la parte superior), también para windows pero funciona bien con wine en linux.

Nota 4: La característica de enviar blob se debe usar con cuidado solo la he probado para archivo de 100kb, que codificado en base64 es un poco más de 100kb casi 123kb, no se que pasé si envia por lo menos un archivo de 1mb por ejemplo, si algún valiente desea hacer la prueba pues la hace y me avisa como le fue.

Pre Nota 1: Observe que hay un cambio en el SecurityTokenID y TransactionID eso es debido a que tuve que trasladar mi laptop a otra red, y llamme nuevamente al System.Start.Session y System.Start.Transaction generando nuevos ID  

Prueba 7 Caso 5 (Ejecutar una inserción parametrizada, recodando que el campos ID de la tabla es AutoIncrement, sobre DB6), para ver la salida del servicio vea el archivo test07_service_output_case5.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Insert Into tblGenericData(Data1,Data2) Values([paramvalue]Data1[/paramvalue],[paramvalue]Data2[/paramvalue])
Data1=[array datatype="varchar"] [value]Data Test Id:1000[/value] [value]NULL[/value] [/array]
Data2=[array datatype="varchar"] [value]NULL[/value] [value]Data Test Id:Auto[/value] [/array]

Nota 1: La inserción no se materializa en la tabla hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Pruebas de Actualización (Update)

Prueba 8 Caso 1 (Ejecutar una modificación plana, sin parámetros, sobre DB6), para ver la salida del servicio vea el archivo test08_service_output_case1.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Update tblGroups Set Description='test group2 modified' Where IdGroup=2

Nota 1: La modificación no se materializa en la tabla hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Nota 2: Para verificar que se modificó correctamente puedes usar la siguiente llamada al servicio System.Execute.SQL

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Select * From tblGroups Where IdGroup=2

Prueba 8 Caso 2 (Ejecutar una modificación parametrizada, sobre DB6), para ver la salida del servicio vea el archivo test08_service_output_case2.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Update tblGroups Set Description=[paramvalue]Description[/paramvalue] Where IdGroup=[paramvalue]IdGroup[/paramvalue]
Description=[array datatype="varchar"] [value]test group4 modified[/value] [value]test group5 modified[/value] [/array]
IdGroup=[array datatype="integer"] [value]4[/value] [value]5[/value] [/array]

Nota 1: La modificación no se materializa en la tabla hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Nota 2: Para verificar que se modificó correctamente puedes usar la siguiente llamada al servicio System.Execute.SQL

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Select * From tblGroups Where IdGroup=[paramvalue]IdGroup[/paramvalue]
IdGroup=[array datatype="integer"] [value]4[/value] [value]5[/value] [/array]

Pruebas de Eliminación (Delete)

Prueba 9 Caso 1 (Ejecutar una eliminación plana, sin parámetros, sobre DB6), para ver la salida del servicio vea el archivo test09_service_output_case1.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Delete From tblGenericData Where Id=1

Nota 1: La eliminación no se materializa en la tabla hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Nota 2: Para verificar que se eliminó correctamente puedes usar la siguiente llamada al servicio System.Execute.SQL

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Select * From tblGenericData

Prueba 9 Caso 2 (Ejecutar una modificación parametrizada, sobre DB6), para ver la salida del servicio vea el archivo test09_service_output_case2.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Delete From tblGenericData Where Id=[paramvalue]Id[/paramvalue]
Id=[array datatype="integer"] [value]3[/value] [value]5[/value] [/array]

Nota 1: La eliminación no se materializa en la tabla hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Nota 2: Para verificar que se eliminó correctamente puedes usar la siguiente llamada al servicio System.Execute.SQL

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Select * From tblGenericData

Pruebas de llamadas a procedimientos almacenados (Call)

Prueba 10 Case 1 (Ejecutar un procedimiento almacenado con retorno de información y parametrizado, sobre DB6), para ver la salida del servicio vea el archivo test10_service_output_case1.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Call spGetGroups([paramvalue]IdGroup[/paramvalue])
IdGroup=[array datatype="integer"] [value]1[/value] [value]2[/value] [/array]

Prueba 10 Case 2 (Ejecutar un procedimiento almacenado plano con retorno de información, sobre DB6), para ver la salida del servicio vea el archivo test10_service_output_case2.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Call spGetGroups(1)

Prueba 10 Case 3 (Ejecutar un procedimiento almacenado plano sin retorno de información, sobre DB6), para ver la salida del servicio vea el archivo test10_service_output_case3.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Call spSetGroups(NULL,'Test Callable statement')

Nota 1: El procedimiento almacenado lleva a cabo una inserción que no se materializa en la tabla hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Prueba 10 Case 4 (Ejecutar un procedimiento almacenado plano con retorno de información, sobre DB1), para ver la salida del servicio vea el archivo test10_service_output_case4.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=Call spCheckDBUser([paramvalue]User[/paramvalue],[paramvalue]Password[/paramvalue],[paramvalue]IdValid[/paramvalue],[paramvalue]IdUser[/paramvalue],[paramvalue]IdGroup[/paramvalue],[paramvalue]LastAccessDate[/paramvalue],[paramvalue]LastAccessTime[/paramvalue])
User=[array scope="in" datatype="varchar"] [value]test1[/value] [/array]
Password=[array scope="in" datatype="varchar"] [value]123qwerty[/value] [/array]
IdValid=[array scope="out" datatype="integer"][/array]
IdUser=[array scope="out" datatype="integer"][/array]
IdGroup=[array scope="out" datatype="integer"][/array]
LastAccessDate=[array scope="out" datatype="date"][/array]
LastAccessTime=[array scope="out" datatype="time"][/array]

Nota 1: El procedimiento almacenado lleva a cabo una inserción que no se materializa en la tabla hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Nota 2: El anterior caso pudo ser manejado como una llamada plana sin parametrización, sin embargo para las pruebas con MySQL ilustra el uso de variables de tipo OUT

Prueba de llamadas a DDL 

Prueba 11 Caso 1 (Ejecutar un Create plano, no parametrizado, sobre DB6), para ver la salida del servicio vea el archivo test11_service_output_case1.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=CREATE TABLE TBLTESTTABLE1( ID INTEGER NOT NULL,  DATA1  VARCHAR(100), DATA2  VARCHAR(100), PRIMARY KEY (id) );

Nota 1: La instrucción DDL lleva a cabo la creación de una tabla que no se materializa hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Prueba 11 Caso 2 (Ejecutar un Alter plano, no paramétrizado, sobre DB6), para ver la salida del servicio vea el archivo test11_service_output_case2.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=ALTER TABLE TBLTESTTABLE1 ADD DATA3 VarChar(100)

Nota 1: La instrucción DDL lleva a cabo la creación de un campo DATA3 en la tabla que no se materializa hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Prueba 11 Caso 3 (Ejecutar un DROP plano, no paramétrizado, sobre DB6), para ver la salida del servicio vea el archivo test11_service_output_case3.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=ALTER TABLE TBLTESTTABLE1 DROP DATA3

Nota 1: La instrucción DDL lleva a cabo la eliminación de un campo DATA3 en la tabla que no se materializa hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Prueba 12 Caso 1 (Ejecutar un Create plano, no parametrizado, sobre DB6), para ver la salida del servicio vea el archivo test12_service_output_case1.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=CREATE PROCEDURE SPGETGROUP1 ( IN FORIDGROUP integer ) BEGIN Select A.IdGroup, A.Description from tblGroups A Where ForIdGroup Is Null Or A.IdGroup = ForIdGroup; END 

Nota 1: La instrucción DDL lleva a cabo la creación de un procedimiento almacenado SPGETGROUP1 que no se materializa hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Prueba 12 Caso 2 (Ejecutar un DROP plano, no parametrizado, sobre DB6), para ver la salida del servicio vea el archivo test12_service_output_case2.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=DROP PROCEDURE SPGETGROUP1

Nota 1: La instrucción DDL lleva a cabo la eliminación de un procedimiento almacenado SPGETGROUP1 que no se materializa hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717

Prueba 13 Caso 1 (Ejecutar un ALTER plano, no parametrizado, sobre DB6), para ver la salida del servicio vea el archivo test13_service_output_case1.xml

ServiceName=System.Execute.SQL
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
SQL=ALTER TABLE tblBlobData auto_increment=10

Nota 1: La instrucción DDL lleva a cabo el establecimiento de la secuencia GEN_TBLBLOBDATA_ID a el número 10 que no se materializa hasta aplicar un commit llamando al servicios System.Commit.Transaction de la siguiente manera

ServiceName=System.Commit.Transaction
SecurityTokenID=1885853838911741669
TransactionID=1568342447065610717
